# Travel_Chat_Bot_ChromaDB.py
# =======================================
# ·ª®ng d·ª•ng Streamlit "M√¢y Lang Thang" + ChromaDB (RAG + Semantic Cache + Memory)
# - Gi·ªØ nguy√™n tr·∫£i nghi·ªám & logic t·ª´ b·∫£n UI_FULL_with_Hero, b·ªï sung:
#   * ChromaDB PersistentClient
#   * Collection: travel_kb, answer_cache, conversations
#   * Seed d·ªØ li·ªáu t·ª´ CSV (vietnam_foods.csv, restaurants_vn.csv)
#   * RAG: truy xu·∫•t ng·ªØ c·∫£nh theo th√†nh ph·ªë + lo·∫°i (food/restaurant/tip)
#   * Semantic Answer Cache: gi·∫£m chi ph√≠, tƒÉng t·ªëc
#   * Conversation Memory: nh·ªõ Q/A theo city
#   * Debugger UI trong tab Analytics
#
# Ch·∫°y th·ª≠:
#   1) pip install -r requirements.txt
#   2) export OPENAI_API_KEY=... (ho·∫∑c ƒë·∫∑t trong .streamlit/secrets.toml)
#   3) streamlit run Travel_Chat_Bot_ChromaDB.py
#
# Tham kh·∫£o ki·∫øn tr√∫c & c·∫•u tr√∫c UI g·ªëc t·ª´ file c·ªßa b·∫°n. (see README)
# =======================================

import streamlit as st
import json, os, re, time, sqlite3
from datetime import datetime, timedelta
import pandas as pd
import requests
import pydeck as pdk
import plotly.express as px
from chromadb.utils import embedding_functions

# OpenAI client (modern SDK)
import openai

# Geocoding
from geopy.geocoders import Nominatim

# ---- ChromaDB (optional, graceful fallback) ----
CHROMA_AVAILABLE = True
try:
    import chromadb
except Exception:
    CHROMA_AVAILABLE = False

# -------------------------
# PAGE CONFIG & THEME
# -------------------------
st.set_page_config(page_title="ü§ñ [M√¢y Lang Thang] - Travel Assistant + ChromaDB", layout="wide", page_icon="üå¥")

st.markdown(
    """
    <style>
    :root{
      --primary:#2b4c7e;
      --accent:#e7f3ff;
      --muted:#f2f6fa;
    }
    body {
      background: linear-gradient(90deg, #f8fbff 0%, #eef5fa 100%);
      font-family: 'Segoe UI', Roboto, Arial, sans-serif;
    }
    .stApp > header {visibility: hidden;}
    h1, h2, h3 { color: var(--primary); }
    .sidebar-card { background-color:#f1f9ff; padding:10px; border-radius:10px; margin-bottom:8px;}
    .user-message { background: #f2f2f2; padding:10px; border-radius:12px; }
    .assistant-message { background: #e7f3ff; padding:10px; border-radius:12px; }
    .pill-btn { border-radius:999px !important; background:#e3f2fd !important; color:var(--primary) !important; padding:6px 12px; border: none; }
    .status-ok { background:#d4edda; padding:8px; border-radius:8px; }
    .status-bad { background:#f8d7da; padding:8px; border-radius:8px; }
    .small-muted { color: #6b7280; font-size:12px; }
    .logo-title { display:flex; align-items:center; gap:10px; }
    .logo-title h1 { margin:0; }
    .assistant-bubble {
      background-color: #e7f3ff;
      padding: 12px 16px;
      border-radius: 15px;
      margin-bottom: 6px;
    }
    .user-message {
      background-color: #f2f2f2;
      padding: 12px 16px;
      border-radius: 15px;
      margin-bottom: 6px;
    }
    .hero {
      position: relative;
      border-radius: 16px;
      overflow: hidden;
      box-shadow: 0 8px 30px rgba(43,76,126,0.12);
      margin-bottom: 18px;
    }
    .hero__bg {
      width: 100%;
      height: 320px;
      object-fit: cover;
      filter: brightness(0.65) saturate(1.05);
    }
    .hero__overlay {
      position: absolute;
      top: 0; left: 0; right: 0; bottom: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 24px;
    }
    .hero__card {
      background: linear-gradient(90deg, rgba(255,255,255,0.02), rgba(255,255,255,0.08));
      backdrop-filter: blur(6px);
      border-radius: 12px;
      padding: 18px;
      width: 100%;
      max-width: 980px;
      color: white;
    }
    .hero__title { font-size: 28px; font-weight:700; margin:0 0 6px 0; color: #fff; }
    .hero__subtitle { margin:0 0 12px 0; color: #f0f6ff; }
    .hero__cta { display:flex; gap:8px; align-items:center; }

    @media (max-width: 768px) {
      .hero__bg { height: 220px; }
      .hero__title { font-size: 20px; }
    }
    </style>
    """, unsafe_allow_html=True
)

# -------------------------
# CONFIG / SECRETS
# -------------------------
try:
    OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]
    OPENAI_API_KEY_EMBEDDING = st.secrets["OPENAI_API_KEY_EMBEDDING"]
except Exception:
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", None)
    OPENAI_API_KEY_EMBEDDING = st.secrets["OPENAI_API_KEY_EMBEDDING"]

OPENAI_ENDPOINT = st.secrets.get("OPENAI_ENDPOINT", "https://api.openai.com/v1") if hasattr(st, 'secrets') else os.getenv("OPENAI_ENDPOINT", "https://api.openai.com/v1")
DEPLOYMENT_NAME = st.secrets.get("DEPLOYMENT_NAME", "gpt-4o-mini") if hasattr(st, 'secrets') else os.getenv("DEPLOYMENT_NAME", "gpt-4o-mini")
OPENWEATHERMAP_API_KEY = st.secrets.get("OPENWEATHERMAP_API_KEY", "") if hasattr(st, 'secrets') else os.getenv("OPENWEATHERMAP_API_KEY", "")
GOOGLE_PLACES_KEY = st.secrets.get("PLACES_API_KEY", "") if hasattr(st, 'secrets') else os.getenv("PLACES_API_KEY", "")
PIXABAY_API_KEY = st.secrets.get("PIXABAY_API_KEY", "") if hasattr(st, 'secrets') else os.getenv("PIXABAY_API_KEY", "")

EMBEDDING_MODEL = st.secrets.get("EMBEDDING_MODEL", "text-embedding-3-small") if hasattr(st, 'secrets') else os.getenv("EMBEDDING_MODEL", "text-embedding-3-small")
CHROMA_PATH = st.secrets.get("CHROMA_PATH", "./.chroma") if hasattr(st, 'secrets') else os.getenv("CHROMA_PATH", "./.chroma")

# Initialize OpenAI client (modern)
if OPENAI_API_KEY:
    client = openai.OpenAI(base_url=OPENAI_ENDPOINT, api_key=OPENAI_API_KEY)
else:
    client = None

ChatBotName = "[M√¢y Lang Thang]"
system_prompt = """
B·∫°n l√† H∆∞·ªõng d·∫´n vi√™n du l·ªãch ·∫£o Alex - ng∆∞·ªùi k·ªÉ chuy·ªán, am hi·ªÉu vƒÉn h√≥a, l·ªãch s·ª≠, ·∫©m th·ª±c v√† th·ªùi ti·∫øt Vi·ªát Nam.
Lu√¥n ƒë∆∞a ra th√¥ng tin h·ªØu √≠ch, g·ª£i √Ω l·ªãch tr√¨nh, m√≥n ƒÉn, chi ph√≠, th·ªùi gian l√Ω t∆∞·ªüng, s·ª± ki·ªán v√† g√≥c ch·ª•p ·∫£nh.
"""

# -------------------------
# DB LOGGING (SQLite)
# -------------------------
DB_PATH = "travel_chatbot_logs.db"

def init_db():
    conn = sqlite3.connect(DB_PATH); cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS interactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT,
            user_input TEXT,
            city TEXT,
            start_date TEXT,
            end_date TEXT,
            intent TEXT
        )
    """)
    conn.commit(); conn.close()

init_db()

def log_interaction(user_input, city=None, start_date=None, end_date=None, intent=None):
    conn = sqlite3.connect(DB_PATH); cur = conn.cursor()
    cur.execute("""
        INSERT INTO interactions (timestamp, user_input, city, start_date, end_date, intent)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (datetime.utcnow().isoformat(), user_input, city,
          start_date.isoformat() if start_date else None,
          end_date.isoformat() if end_date else None,
          intent))
    conn.commit(); conn.close()

# -------------------------
# GEOCODING & MAPS
# -------------------------
geolocator = Nominatim(user_agent="travel_chatbot_app")

def geocode_city(city_name):
    try:
        loc = geolocator.geocode(city_name, timeout=10)
        if loc: return loc.latitude, loc.longitude, loc.address
        return None, None, None
    except Exception:
        return None, None, None

def show_map(lat, lon, zoom=8, title=""):
    if lat is None or lon is None:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu to·∫° ƒë·ªô ƒë·ªÉ hi·ªÉn th·ªã b·∫£n ƒë·ªì."); return
    st.write(f"**V·ªã tr√≠:** {title} ({lat:.5f}, {lon:.5f})")
    view = pdk.ViewState(latitude=lat, longitude=lon, zoom=zoom)
    layer = pdk.Layer(
        "ScatterplotLayer",
        data=pd.DataFrame([{"lat": lat, "lon": lon}]),
        get_position='[lon, lat]',
        get_radius=3000,
        get_fill_color=[220, 40, 40],
        get_opacity=0.9,
    )
    deck = pdk.Deck(
        layers=[layer],
        initial_view_state=view,
        map_style="https://basemaps.cartocdn.com/gl/positron-gl-style/style.json",
        tooltip={"text": title or "V·ªã tr√≠"}
    )
    st.pydeck_chart(deck)

# -------------------------
# WEATHER (OpenWeatherMap) with AI fallback
# -------------------------
def resolve_city_via_ai(user_text):
    if not client: return None
    try:
        prompt = f"""
B·∫°n l√† chuy√™n gia ƒë·ªãa l√Ω du l·ªãch Vi·ªát Nam.
Ph√¢n t√≠ch c√¢u sau ƒë·ªÉ x√°c ƒë·ªãnh:
1. 'place': ƒë·ªãa danh c·ª• c·ª• th·ªÉ (khu du l·ªãch, c√¥ng vi√™n, ƒë·∫£o, th·∫Øng c·∫£nh,...)
2. 'province_or_city': t√™n t·ªânh ho·∫∑c th√†nh ph·ªë c·ªßa Vi·ªát Nam m√† ƒë·ªãa danh ƒë√≥ thu·ªôc v·ªÅ.
N·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c, tr·∫£ v·ªÅ null.
K·∫øt qu·∫£ JSON v√≠ d·ª•: {{"place": "Phong Nha - K·∫ª B√†ng", "province_or_city": "Qu·∫£ng B√¨nh"}}
C√¢u: "{user_text}"
"""
        response = client.chat.completions.create(
            model=DEPLOYMENT_NAME,
            messages=[{"role": "system", "content": prompt}],
            max_tokens=200,
            temperature=0
        )
        text = response.choices[0].message.content.strip()
        start, end = text.find("{"), text.rfind("}")
        if start == -1 or end == -1: return None
        data = json.loads(text[start:end+1])
        return data.get("province_or_city")
    except Exception:
        return None

def get_weather_forecast(city_name, start_date=None, end_date=None, user_text=None):
    if not OPENWEATHERMAP_API_KEY:
        return "‚ö†Ô∏è Thi·∫øu OpenWeatherMap API Key."
    try:
        def _fetch(city):
            url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={OPENWEATHERMAP_API_KEY}&lang=vi&units=metric"
            return requests.get(url, timeout=8).json()
        data = _fetch(city_name)
        if data.get("cod") != "200" and user_text:
            ai_city = resolve_city_via_ai(user_text)
            if ai_city and ai_city.lower() != city_name.lower():
                data = _fetch(f"{ai_city},VN"); city_name = ai_city
        if data.get("cod") != "200":
            return f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin d·ª± b√°o th·ªùi ti·∫øt cho ƒë·ªãa ƒëi·ªÉm: **{city_name}**."
        forecast_text = f"üå§ **D·ª± b√°o th·ªùi ti·∫øt cho {city_name}:**\n"
        if start_date and end_date:
            current = start_date
            while current <= end_date:
                date_str = current.strftime("%Y-%m-%d")
                day_forecasts = [f for f in data['list'] if f['dt_txt'].startswith(date_str)]
                if not day_forecasts:
                    forecast_text += f"\nüìÖ {current.strftime('%d/%m/%Y')}: Kh√¥ng c√≥ d·ªØ li·ªáu d·ª± b√°o.\n"
                else:
                    temps = [f['main']['temp'] for f in day_forecasts]
                    desc = day_forecasts[0]['weather'][0]['description']
                    forecast_text += f"\nüìÖ {current.strftime('%d/%m/%Y')} - {desc.capitalize()}\nüå° Nhi·ªát ƒë·ªô trung b√¨nh: {sum(temps)/len(temps):.1f}¬∞C\n"
                current += timedelta(days=1)
        else:
            first = data['list'][0]
            desc = first['weather'][0]['description'].capitalize()
            temp = first['main']['temp']
            forecast_text += f"- Hi·ªán t·∫°i: {desc}, {temp}¬∞C\n"
        return forecast_text
    except Exception as e:
        return f"‚ö†Ô∏è L·ªói khi l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt: {e}"

# -------------------------
# PIXABAY IMAGE FUNCTIONS
# -------------------------
def get_pixabay_image(query, per_page=3):
    if not PIXABAY_API_KEY: return None
    try:
        url = "https://pixabay.com/api/"
        params = {"key": PIXABAY_API_KEY, "q": query, "image_type": "photo", "orientation": "horizontal", "safesearch": "true", "per_page": per_page}
        res = requests.get(url, params=params, timeout=8); data = res.json()
        if data.get("hits"):
            return data["hits"][0].get("largeImageURL") or data["hits"][0].get("webformatURL")
        return None
    except Exception:
        return None

def get_city_image(city):
    if not city: return None
    queries = [f"{city} Vietnam landscape", f"{city} Vietnam city", f"{city} Vietnam travel", "Vietnam travel landscape"]
    for q in queries:
        img = get_pixabay_image(q)
        if img: return img
    return "https://via.placeholder.com/1200x800?text=No+Image"

def get_food_images(food_list):
    images = []
    for food in food_list[:5]:
        query = f"{food} Vietnam food"
        img_url = get_pixabay_image(query) or "https://via.placeholder.com/400x300?text=No+Image"
        images.append({"name": food, "image": img_url})
    return images

# -------------------------
# RESTAURANTS HYBRID
# -------------------------
def get_restaurants_google(city, api_key, limit=5):
    try:
        query = f"nh√† h√†ng t·∫°i {city}, Vi·ªát Nam"
        url = "https://maps.googleapis.com/maps/api/place/textsearch/json"
        params = {"query": query, "key": api_key, "language": "vi"}
        res = requests.get(url, params=params, timeout=10).json()
        if "error_message" in res: return [{"error": res["error_message"]}]
        results = []
        for r in res.get("results", [])[:limit]:
            results.append({
                "name": r.get("name"),
                "rating": r.get("rating", "N/A"),
                "address": r.get("formatted_address", ""),
                "maps_url": f"https://www.google.com/maps/place/?q=place_id:{r.get('place_id')}"
            })
        return results
    except Exception as e:
        return [{"error": str(e)}]

def get_local_restaurants(city, limit=5):
    try:
        df = pd.read_csv("data/restaurants_vn.csv")
        df_city = df[df["city"].str.lower().str.contains(str(city).lower(), na=False)]
        if df_city.empty: return []
        return df_city.head(limit).to_dict("records")
    except Exception:
        return []

def get_restaurants(city, limit=5):
    if not city: return []
    if GOOGLE_PLACES_KEY:
        data = get_restaurants_google(city, GOOGLE_PLACES_KEY, limit)
        if data and not data[0].get("error"): return data
    return get_local_restaurants(city, limit)

# -------------------------
# FOOD AI ASSISTANT
# -------------------------
def re_split_foods(s):
    for sep in [",", "|", ";"]:
        if sep in s: return [p.strip() for p in s.split(sep) if p.strip()]
    return [s.strip()]

def get_local_foods(city):
    try:
        df = pd.read_csv("data/vietnam_foods.csv", dtype=str)
        mask = df["city"].str.lower().str.contains(str(city).lower(), na=False)
        row = df[mask]
        if not row.empty:
            row0 = row.iloc[0]
            if "foods" in row0.index:
                foods_cell = row0["foods"]
                if pd.notna(foods_cell): return re_split_foods(foods_cell)
            else:
                vals = row0.dropna().tolist()
                if len(vals) > 1: return [v for v in vals[1:]]
    except Exception:
        pass
    return []

def get_foods_via_gpt(city, max_items=5):
    if not client: return []
    try:
        prompt = (
            f"You are an expert on Vietnamese cuisine.\n"
            f"List up to {max_items} iconic or must-try dishes from the city/region '{city}'.\n"
            "Return only a comma-separated list of dish names (no extra text)."
        )
        response = client.chat.completions.create(
            model=DEPLOYMENT_NAME,
            messages=[{"role":"system","content":prompt}],
            max_tokens=150, temperature=0.5
        )
        text = response.choices[0].message.content.strip()
        items = [t.strip() for t in text.split(",") if t.strip()]
        return items[:max_items]
    except Exception:
        return []

def get_local_foods_with_fallback(city):
    foods = get_local_foods(city)
    if not foods: foods = get_foods_via_gpt(city)
    return foods

# -------------------------
# SUGGESTIONS / COST / PHOTOSPOTS
# -------------------------
def estimate_cost(city, days=3, people=1, style="trung b√¨nh"):
    mapping = {"ti·∫øt ki·ªám": 400000, "trung b√¨nh": 800000, "cao c·∫•p": 2000000}
    per_day = mapping.get(style, 800000); total = per_day * days * people
    return f"üí∏ Chi ph√≠ ∆∞·ªõc t√≠nh: kho·∫£ng {total:,} VNƒê cho {people} ng∆∞·ªùi, {days} ng√†y."

def suggest_events(city): return f"üéâ S·ª± ki·ªán ·ªü {city}: l·ªÖ h·ªôi ƒë·ªãa ph∆∞∆°ng, ch·ª£ ƒë√™m, h·ªôi ch·ª£ ·∫©m th·ª±c (tu·ª≥ m√πa)."

# -------------------------
# BILINGUAL CITY & DATE EXTRACTION
# -------------------------
def extract_city_and_dates(user_text):
    if not client: return None, None, None
    try:
        prompt = f"""
You are a multilingual travel information extractor.
The user message may be in Vietnamese or English.
Extract:
1. Destination city (field 'city') - if none, return null
2. Start date (field 'start_date') in YYYY-MM-DD format or null
3. End date (field 'end_date') in YYYY-MM-DD format or null
Rules:
- If user provides only one date, set both start_date and end_date to that date.
- If the user gives day/month without year, assume current year.
- Return valid JSON ONLY, for example:
{{"city":"Hanoi", "start_date":"2025-10-20", "end_date":"2025-10-22"}}
Message: "{user_text}"
"""
        response = client.chat.completions.create(
            model=DEPLOYMENT_NAME,
            messages=[{"role":"system","content":prompt}],
            max_tokens=200, temperature=0
        )
        content = response.choices[0].message.content.strip()
        start = content.find('{'); end = content.rfind('}')
        if start == -1 or end == -1: return None, None, None
        data = json.loads(content[start:end+1])
        city = data.get("city"); s = data.get("start_date"); e = data.get("end_date")
        def _parse(d):
            if not d: return None
            return datetime.strptime(d, "%Y-%m-%d")
        start_dt = _parse(s); end_dt = _parse(e)
        if start_dt and not end_dt: end_dt = start_dt
        return city, start_dt, end_dt
    except Exception:
        return None, None, None

def extract_days_from_text(user_text, start_date=None, end_date=None):
    if start_date and end_date:
        try:
            delta = (end_date - start_date).days + 1
            return max(delta, 1)
        except Exception:
            pass
    m = re.search(r"(\d+)\s*(ng√†y|day|days|tu·∫ßn|week|weeks)", user_text, re.IGNORECASE)
    if m:
        num = int(m.group(1)); unit = m.group(2).lower()
        if "tu·∫ßn" in unit or "week" in unit: return num * 7
        return num
    if client:
        try:
            prompt = f"""
B·∫°n l√† m·ªôt b·ªô ph√¢n t√≠ch ng·ªØ nghƒ©a ti·∫øng Vi·ªát & ti·∫øng Anh.
X√°c ƒë·ªãnh ng∆∞·ªùi d√πng mu·ªën n√≥i bao nhi√™u ng√†y trong c√¢u sau, n·∫øu kh√¥ng c√≥ th√¨ m·∫∑c ƒë·ªãnh 3:
Tr·∫£ v·ªÅ JSON: {{"days": <s·ªë nguy√™n>}}
C√¢u: "{user_text}"
"""
            response = client.chat.completions.create(
                model=DEPLOYMENT_NAME,
                messages=[{"role": "system", "content": prompt}],
                max_tokens=50, temperature=0
            )
            text = response.choices[0].message.content.strip()
            num_match = re.search(r'"days"\s*:\s*(\d+)', text)
            if num_match: return int(num_match.group(1))
        except Exception:
            pass
    return 3

# -------------------------
# === ChromaDB INTEGRATION ===
# -------------------------
@st.cache_resource
def get_chroma():
    if not CHROMA_AVAILABLE:
        return None, None, None, None
    try:
        client_chroma = chromadb.PersistentClient(path=CHROMA_PATH)

        class OpenAIEmbedder:
            def __init__(self, _client, model):
                self.client = _client; self.model = model
            def __call__(self, texts):
                if isinstance(texts, str): texts = [texts]
                try:
                    resp = client.embeddings.create(model=self.model, input=texts)
                    return [d.embedding for d in resp.data]
                except Exception as e:
                    # fallback: zeros
                    return [[0.0]*1536 for _ in texts]

        # embedder = OpenAIEmbedder(client, EMBEDDING_MODEL)
        embedder = embedding_functions.OpenAIEmbeddingFunction(
            api_key=OPENAI_API_KEY,
            model_name= OPENAI_API_KEY_EMBEDDING
        )


        kb = client_chroma.get_or_create_collection(
            name="travel_kb",
            embedding_function=embedder,
            metadata={"hnsw:space": "cosine"}
        )
        cache = client_chroma.get_or_create_collection(
            name="answer_cache",
            embedding_function=embedder,
            metadata={"hnsw:space": "cosine"}
        )
        conv = client_chroma.get_or_create_collection(
            name="conversations",
            embedding_function=embedder,
            metadata={"hnsw:space": "cosine"}
        )
        return client_chroma, kb, cache, conv
    except Exception as e:
        st.warning(f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o ChromaDB: {e}")
        return None, None, None, None

chroma_client, chroma_kb, chroma_cache, chroma_conv = get_chroma()
CHROMA_READY = CHROMA_AVAILABLE and (chroma_kb is not None)

def seed_kb_from_csvs(kb):
    if not kb: return 0
    docs, metas, ids = [], [], []
    # foods
    try:
        df_food = pd.read_csv("data/vietnam_foods.csv", dtype=str)
        for _, r in df_food.iterrows():
            city = (r.get("city") or "").strip()
            foods_cell = (r.get("foods") or "").strip()
            if not city or not foods_cell: continue
            foods = [f.strip() for f in re.split(r"[|,;]", foods_cell) if f.strip()]
            if not foods: continue
            text = f"ƒê·∫∑c s·∫£n ·ªü {city}: " + ", ".join(foods)
            docs.append(text); metas.append({"city": city, "type": "food", "source": "csv"}); ids.append(f"food::{city}::{len(ids)}")
    except Exception:
        pass
    # restaurants
    try:
        df_res = pd.read_csv("data/restaurants_vn.csv", dtype=str)
        for _, r in df_res.iterrows():
            city = (r.get("city") or "").strip()
            name = (r.get("place_name") or r.get("name") or "").strip()
            addr = (r.get("address") or "").strip()
            if not city or not name: continue
            text = f"Nh√† h√†ng g·ª£i √Ω ·ªü {city}: {name} - {addr}"
            docs.append(text); metas.append({"city": city, "type": "restaurant", "source": "csv"}); ids.append(f"rest::{city}::{len(ids)}")
    except Exception:
        pass
    if docs:
        kb.add(documents=docs, metadatas=metas, ids=ids)
    return len(docs)

def retrieve_context(kb, query, city=None, k=6):
    if not kb: return []
    where = {"city": city} if city else None
    res = kb.query(query_texts=[query], n_results=k, where=where, include=["documents","metadatas","distances","ids"])
    if not res or not res.get("documents"): return []
    items = []
    docs = res["documents"][0]; metas = res["metadatas"][0]; dists = res["distances"][0]
    for doc, meta, dist in zip(docs, metas, dists):
        items.append({"doc": doc, "meta": meta, "dist": float(dist)})
    items.sort(key=lambda x: x["dist"])
    return items

def hit_answer_cache(cache, query, city=None, threshold=0.09):
    if not cache: return None
    where = {"city": city} if city else None
    res = cache.query(query_texts=[query], n_results=1, where=where, include=["documents","metadatas","distances"])
    if not res or not res.get("documents") or not res["documents"][0]: return None
    dist = float(res["distances"][0][0])
    return res["documents"][0][0] if dist <= threshold else None

def push_answer_cache(cache, query, city, answer):
    if not cache: return
    cache.add(documents=[answer], metadatas=[{"city": city or ""}], ids=[f"cache::{city or 'na'}::{int(time.time()*1000)}"])

def save_conversation(conv, user_input, assistant_text, city):
    if not conv: return
    conv.add(
        documents=[f"Q: {user_input}\nA: {assistant_text}"],
        metadatas=[{"city": city or "", "timestamp": datetime.utcnow().isoformat()}],
        ids=[f"conv::{int(time.time()*1000)}"]
    )

# -------------------------
# HERO / HEADER SECTION
# -------------------------
def render_hero_section(default_city_hint="H·ªôi An, ƒê√† N·∫µng, H√† N·ªôi..."):
    hero_img = "https://images.unsplash.com/photo-1633073985249-b2d67bdf6b7d?auto=format&fit=crop&q=80&w=1600"
    st.markdown(f"""
    <div class='hero' style="background-image: url('{hero_img}'); background-size: cover; background-position: center; background-repeat: no-repeat; height:200px;">
      <div class='hero__overlay'>
        <div class='hero__card'>
          <div style='display:flex; align-items:center; justify-content:space-between; gap:12px;'>
            <div style='flex:1'>
              <h1 class='hero__title'>Kh√°m ph√° Vi·ªát Nam c√πng M√¢y Lang Thang</h1>
              <p class='hero__subtitle'>G·ª£i √Ω l·ªãch tr√¨nh, m√≥n ƒÉn, d·ª± b√°o th·ªùi ti·∫øt. Nh·∫≠p ƒëi·ªÉm ƒë·∫øn, ch·ªçn ng√†y v√† b·∫Øt ƒë·∫ßu cu·ªôc h√†nh tr√¨nh!</p>
            </div>
            <div style='min-width:260px; text-align:right;'>
              <span style='font-size:14px; opacity:0.95'>üå§Ô∏è T√¨m nhanh & g·ª£i √Ω t·ª©c th√¨</span>
            </div>
          </div>
        </div>
      </div>
    </div>
    """, unsafe_allow_html=True)

    with st.form(key='hero_search_form', clear_on_submit=False):
        cols = st.columns([3,2,1,1])
        dest = cols[0].text_input("ƒêi·ªÉm ƒë·∫øn", placeholder=default_city_hint)
        dates = cols[1].date_input("Ng√†y (b·∫Øt ƒë·∫ßu / k·∫øt th√∫c)", [])
        people = cols[2].selectbox("Ng∆∞·ªùi", [1,2,3,4,5,6], index=0)
        style = cols[3].selectbox("M·ª©c chi", ["trung b√¨nh", "ti·∫øt ki·ªám", "cao c·∫•p"], index=0)
        submitted = st.form_submit_button("T√¨m ki·∫øm nhanh", use_container_width=True)

        if submitted:
            if isinstance(dates, list) and len(dates) == 2:
                s = dates[0].strftime("%Y-%m-%d"); e = dates[1].strftime("%Y-%m-%d")
                q = f"L·ªãch tr√¨nh {((dates[1]-dates[0]).days +1)} ng√†y ·ªü {dest} t·ª´ {s} ƒë·∫øn {e}"
            elif isinstance(dates, list) and len(dates) == 1:
                s = dates[0].strftime("%Y-%m-%d"); q = f"L·ªãch tr√¨nh 1 ng√†y ·ªü {dest} v√†o {s}"
            else:
                q = f"L·ªãch tr√¨nh 3 ng√†y ·ªü {dest}"
            q += f" ‚Ä¢ ng∆∞·ªùi: {people} ‚Ä¢ m·ª©c: {style}"
            st.session_state.user_input = q; st.rerun()

# -------------------------
# STREAMLIT UI
# -------------------------
render_hero_section()
main_tab, analytics_tab = st.tabs(["üí¨ Chatbot Du l·ªãch", "üìä Th·ªëng k√™ & RAG"])

with st.sidebar:
    st.markdown("<div class='logo-title'><img src='https://img.icons8.com/emoji/48/000000/cloud-emoji.png'/> <h2>M√¢y Lang Thang</h2></div>", unsafe_allow_html=True)
    st.header("C√†i ƒë·∫∑t")
    language_option = st.selectbox("Ng√¥n ng·ªØ (g·ª£i √Ω tr√≠ch xu·∫•t)", ["T·ª± ƒë·ªông", "Ti·∫øng Vi·ªát", "English"])
    info_options = st.multiselect("Hi·ªÉn th·ªã th√¥ng tin", ["Weather", "Food", "Map", "Photos", "Cost", "Events"], default=["Weather","Map","Food","Photos"])
    st.markdown("---")
    map_zoom = st.slider("Zoom b·∫£n ƒë·ªì (4 = xa, 15 = g·∫ßn)", 4, 15, 8)
    st.markdown("---")

    # Chroma status
    def status_card(title, ok=True):
        cls = "status-ok" if ok else "status-bad"; icon = "‚úÖ" if ok else "‚ö†Ô∏è"
        st.markdown(f"<div class='{cls}'>{icon} {title}</div>", unsafe_allow_html=True)

    status_card("ChromaDB", CHROMA_READY)
    status_card("OpenWeatherMap", bool(OPENWEATHERMAP_API_KEY))
    status_card("Google Places", bool(GOOGLE_PLACES_KEY))
    status_card("Pixabay", bool(PIXABAY_API_KEY))

    st.markdown("---")
    if CHROMA_READY:
        st.subheader("üîé RAG / Cache")
        use_rag = st.checkbox("B·∫≠t RAG (Chroma)", value=True, key="use_rag")
        use_cache = st.checkbox("B·∫≠t Semantic Cache", value=True, key="use_cache")
        rag_k = st.slider("Top‚Äëk RAG", 1, 10, 6, key="rag_k")
        if st.button("üì• Seed KB t·ª´ CSV"):
            added = seed_kb_from_csvs(chroma_kb)
            st.success(f"ƒê√£ seed {added} m·∫©u tri th·ª©c v√†o travel_kb.")
    else:
        use_rag = False; use_cache = False; rag_k = 6
        st.info("C√†i ƒë·∫∑t 'chromadb' ƒë·ªÉ s·ª≠ d·ª•ng RAG & cache.")

    st.caption("Version: v2.0 ‚Ä¢ ChromaDB RAG + Cache + Memory")

# initialize session messages
if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "system", "content": system_prompt}]

# Main Tab
with main_tab:
    # Quick Search
    with st.expander("üîé T√¨m ki·∫øm nhanh chuy·∫øn ƒëi"):
        col1, col2, col3, col4 = st.columns([2,1,1,1])
        with col1:
            city_qs = st.text_input("üèôÔ∏è ƒêi·ªÉm ƒë·∫øn", "ƒê√† N·∫µng")
        with col2:
            start_qs = st.date_input("üìÖ B·∫Øt ƒë·∫ßu", datetime(2025,10,20))
        with col3:
            end_qs = st.date_input("üìÖ K·∫øt th√∫c", datetime(2025,10,22))
        with col4:
            people_qs = st.slider("üë• Ng∆∞·ªùi", 1, 10, 1)

        col5, col6 = st.columns([1,3])
        with col5:
            style_qs = st.selectbox("üí∞ M·ª©c chi ti√™u", ["Ti·∫øt ki·ªám","Trung b√¨nh","Cao c·∫•p"], index=1)
        with col6:
            if st.button("üöÄ Xem g·ª£i √Ω"):
                st.session_state.quicksearch = {
                    "city": city_qs, "start": start_qs, "end": end_qs,
                    "people": people_qs, "style": style_qs
                }

    if "quicksearch" in st.session_state:
        qs = st.session_state.quicksearch
        city_qs = qs["city"]; start_qs = qs["start"]; end_qs = qs["end"]
        people_qs = qs["people"]; style_qs = qs["style"]
        st.markdown(f"### ‚úàÔ∏è G·ª£i √Ω cho chuy·∫øn ƒëi {city_qs} ({start_qs} ‚Äì {end_qs})")
        weather_qs = get_weather_forecast(city_qs, start_qs, end_qs)
        cost_qs = estimate_cost(city_qs, (end_qs - start_qs).days + 1, people_qs, style_qs)
        colA, colB = st.columns(2)
        with colA:
            st.markdown(f"**{weather_qs}**"); st.markdown(f"**{cost_qs}**")
        with colB:
            img = get_city_image(city_qs)
            if img: st.image(img, caption=f"üèûÔ∏è {city_qs}", use_container_width=True)
            lat, lon, addr = geocode_city(city_qs)
            if lat and lon: show_map(lat, lon, zoom=map_zoom, title=addr or city_qs)
        st.markdown("---")

    # Suggestions
    st.write("### üîé G·ª£i √Ω nhanh")
    default_suggestions = [
        "Th·ªùi ti·∫øt ·ªü ƒê√† N·∫µng tu·∫ßn t·ªõi?",
        "Top m√≥n ƒÉn ·ªü Hu·∫ø?",
        "L·ªãch tr√¨nh 3 ng√†y ·ªü Nha Trang?",
        "C√≥ s·ª± ki·ªán g√¨ ·ªü H√† N·ªôi th√°ng 12?"
    ]
    cols = st.columns(len(default_suggestions))
    for i, q in enumerate(default_suggestions):
        if cols[i].button(q, key=f"sugg_{i}"):
            st.session_state.user_input = q

    # Chat input
    user_input = st.chat_input("M·ªùi b·∫°n ƒë·∫∑t c√¢u h·ªèi:")
    if "user_input" in st.session_state and st.session_state.user_input:
        user_input = st.session_state.pop("user_input")

    if user_input:
        with st.chat_message("user", avatar="üß≠"):
            st.markdown(f"<div class='user-message'>{user_input}</div>", unsafe_allow_html=True)
        st.session_state.messages.append({"role": "user", "content": user_input})

        city_guess, start_date, end_date = extract_city_and_dates(user_input)
        days = extract_days_from_text(user_input, start_date, end_date)
        log_interaction(user_input, city_guess, start_date, end_date)

        # weather/cost/events blocks
        blocks = []
        if city_guess and "Weather" in info_options:
            blocks.append(get_weather_forecast(city_guess, start_date, end_date, user_input))
        if city_guess and "Cost" in info_options:
            blocks.append(estimate_cost(city_guess, days=days))
        if city_guess and "Events" in info_options:
            blocks.append(suggest_events(city_guess))

        for b in blocks:
            with st.chat_message("assistant", avatar="ü§ñ"):
                if isinstance(b, str):
                    st.markdown(b.replace("\\n", "\n"))
                else:
                    st.write(b)

        with st.spinner("‚è≥ ƒêang so·∫°n ph·∫£n h·ªìi..."):
            try:
                # Build messages with optional RAG
                messages_for_llm = list(st.session_state.messages)
                context_block = ""
                if CHROMA_READY and st.session_state.get("use_rag", False):
                    rag_items = retrieve_context(chroma_kb, user_input, city_guess, k=st.session_state.get("rag_k", 6))
                    if rag_items:
                        lines = []
                        for it in rag_items:
                            meta = it["meta"]; tag = f"{meta.get('type','kb')}/{meta.get('source','')}/{meta.get('city','')}"
                            score = 1.0 - it["dist"]
                            lines.append(f"- [{tag} | sim‚âà{score:.3f}] {it['doc']}")
                        context_block = "\n".join(lines)
                        messages_for_llm.insert(1, {
                            "role": "system",
                            "content": "Ng·ªØ c·∫£nh (∆∞u ti√™n cao, d√πng l√†m ngu·ªìn s·ª± th·∫≠t):\n" + context_block
                        })

                # Semantic cache hit?
                cached_answer = None
                if CHROMA_READY and st.session_state.get("use_cache", False):
                    cached_answer = hit_answer_cache(chroma_cache, user_input, city_guess)

                if cached_answer:
                    assistant_text = cached_answer
                else:
                    if client:
                        response = client.chat.completions.create(
                            model=DEPLOYMENT_NAME,
                            messages=messages_for_llm,
                            max_tokens=900,
                            temperature=0.7
                        )
                        assistant_text = response.choices[0].message.content.strip()
                    else:
                        assistant_text = f"Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi th√¥ng tin v·ªÅ {city_guess or 'ƒë·ªãa ƒëi·ªÉm'} ‚Äî th·ª≠ h·ªèi 'Th·ªùi ti·∫øt', 'ƒê·∫∑c s·∫£n', ho·∫∑c 'L·ªãch tr√¨nh 3 ng√†y'."

                    if CHROMA_READY and st.session_state.get("use_cache", False):
                        push_answer_cache(chroma_cache, user_input, city_guess, assistant_text)

                if not assistant_text.endswith(("üå§Ô∏è‚ù§Ô∏è", "üòä", "üå∏", "üå¥", "‚ú®")):
                    assistant_text += "\n\nCh√∫c b·∫°n c√≥ chuy·∫øn ƒëi vui v·∫ª üå§Ô∏è‚ù§Ô∏è"

                st.session_state.messages.append({"role": "assistant", "content": assistant_text})

                with st.chat_message("assistant", avatar="ü§ñ"):
                    placeholder = st.empty(); display_text = ""
                    for ch in assistant_text:
                        display_text += ch; placeholder.markdown(display_text + "‚ñå")
                        time.sleep(0.005)
                    time.sleep(0.2); placeholder.empty()
                    with st.container():
                        st.markdown("<div class='assistant-bubble'>", unsafe_allow_html=True)
                        st.markdown(assistant_text)
                        st.markdown("</div>", unsafe_allow_html=True)

                if CHROMA_READY:
                    save_conversation(chroma_conv, user_input, assistant_text, city_guess)

            except Exception as e:
                st.error(f"‚ö†Ô∏è L·ªói khi g·ªçi OpenAI: {e}")

        lat, lon, addr = (None, None, None)
        if city_guess:
            lat, lon, addr = geocode_city(city_guess)

        cols = st.columns([2, 3])
        with cols[0]:
            if "Map" in info_options:
                show_map(lat, lon, zoom=map_zoom, title=addr or city_guess)
            if "Photos" in info_options:
                img = get_city_image(city_guess)
                if img:
                    st.image(img, caption=f"üèûÔ∏è {city_guess}", use_container_width=True)
                else:
                    st.info("Kh√¥ng t√¨m th·∫•y ·∫£nh minh h·ªça.")
        with cols[1]:
            if "Food" in info_options:
                st.subheader(f"üçΩÔ∏è ·∫®m th·ª±c & Nh√† h√†ng t·∫°i {city_guess or 'ƒë·ªãa ƒëi·ªÉm'}")
                foods = get_local_foods_with_fallback(city_guess) if city_guess else []
                if foods:
                    st.markdown("#### ü•ò ƒê·∫∑c s·∫£n n·ªïi b·∫≠t")
                    food_images = get_food_images(foods)
                    img_cols = st.columns(min(len(food_images), 4))
                    for i, item in enumerate(food_images):
                        with img_cols[i % len(img_cols)]:
                            if item["image"]:
                                st.image(item["image"], caption=item["name"], use_container_width=True)
                            else:
                                st.write(f"- {item['name']}")
                else:
                    st.info("Kh√¥ng t√¨m th·∫•y m√≥n ƒë·∫∑c tr∆∞ng (CSV/GPT fallback kh√¥ng tr·∫£ k·∫øt qu·∫£).")
            if city_guess:
                st.markdown("#### üç¥ Nh√† h√†ng g·ª£i √Ω")
                restaurants = get_restaurants(city_guess, limit=5)
                if restaurants:
                    for r in restaurants:
                        if isinstance(r, dict) and r.get("error"):
                            st.write(f"‚ö†Ô∏è {r.get('error')}")
                        else:
                            name = r.get("name") or r.get("place_name") or str(r)
                            rating = r.get("rating", "")
                            addr_text = r.get("address", r.get("formatted_address", ""))
                            maps_url = r.get("maps_url", "")
                            st.markdown(f"- **{name}** {f'‚Ä¢ ‚≠ê {rating}' if rating else ''}  \n  {addr_text}  " + (f"[B·∫£n ƒë·ªì]({maps_url})" if maps_url else ""))
                else:
                    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu nh√† h√†ng (CSV/Google Places fallback).")

# -------------------------
# Analytics + RAG Debugger
# -------------------------
with analytics_tab:
    st.header("üìä Th·ªëng k√™ truy v·∫•n")
    with st.expander("üóëÔ∏è Xo√° l·ªãch s·ª≠ truy v·∫•n"):
        st.warning("‚ö†Ô∏è S·∫Ω x√≥a to√†n b·ªô l·ªãch s·ª≠ (SQLite).")
        confirm_delete = st.checkbox("T√¥i hi·ªÉu v√† mu·ªën x√≥a", value=False)
        if confirm_delete and st.button("‚úÖ X√°c nh·∫≠n xo√°"):
            try:
                conn = sqlite3.connect(DB_PATH); cur = conn.cursor()
                cur.execute("DELETE FROM interactions"); conn.commit(); conn.close()
                st.success("‚úÖ ƒê√£ x√≥a.")
            except Exception as e:
                st.error(f"‚ö†Ô∏è L·ªói khi x√≥a d·ªØ li·ªáu: {e}")

    try:
        conn = sqlite3.connect(DB_PATH)
        df_logs = pd.read_sql("SELECT * FROM interactions ORDER BY timestamp DESC LIMIT 1000", conn)
        conn.close()

        total = int(df_logs.shape[0]) if not df_logs.empty else 0
        st.metric("T·ªïng t∆∞∆°ng t√°c", total)

        if not df_logs.empty:
            df_logs['timestamp_dt'] = pd.to_datetime(df_logs['timestamp']); df_logs['date'] = df_logs['timestamp_dt'].dt.date
            series = df_logs.groupby('date').size().reset_index(name='queries')
            fig = px.bar(series, x='date', y='queries', title='üìà S·ªë truy v·∫•n m·ªói ng√†y', color='queries', color_continuous_scale='Blues')
            st.plotly_chart(fig, use_container_width=True)

            top_cities = df_logs['city'].fillna("Unknown").value_counts().reset_index()
            top_cities.columns = ['city', 'count']
            if not top_cities.empty:
                fig2 = px.bar(top_cities.head(10), x='city', y='count', title='üìç Top ƒë·ªãa ƒëi·ªÉm ƒë∆∞·ª£c h·ªèi', color='count', color_continuous_scale='Viridis')
                st.plotly_chart(fig2, use_container_width=True)

            st.dataframe(df_logs[["timestamp", "user_input", "city"]])
        else:
            st.info("Ch∆∞a c√≥ truy v·∫•n n√†o ƒë∆∞·ª£c ghi nh·∫≠n.")
    except Exception as e:
        st.warning(f"L·ªói ƒë·ªçc d·ªØ li·ªáu: {e}")

    if CHROMA_READY:
        with st.expander("üß™ RAG Debugger"):
            q = st.text_input("Query th·ª≠", "ƒê·∫∑c s·∫£n ·ªü Hu·∫ø?")
            c = st.text_input("City filter", "")
            k = st.slider("Top‚Äëk", 1, 10, 5, key="ragdbg_k")
            if st.button("Ch·∫°y truy v·∫•n"):
                items = retrieve_context(chroma_kb, q, c or None, k=k)
                for it in items:
                    st.write(f"{it['meta']}  |  dist={it['dist']:.4f}")
                    st.write(it["doc"])
                    st.markdown("---")
    else:
        st.info("C√†i 'chromadb' ƒë·ªÉ s·ª≠ d·ª•ng RAG Debugger.")

st.markdown("---")
st.markdown("<div class='small-muted'>Tip: H·ªèi 'L·ªãch tr√¨nh 3 ng√†y ·ªü H·ªôi An', 'ƒê·∫∑c s·∫£n Sapa', ho·∫∑c 'Th·ªùi ti·∫øt ƒê√† N·∫µng 2025-10-20 ƒë·∫øn 2025-10-22'.</div>", unsafe_allow_html=True)
