import streamlit as st
import openai
import json
import requests
from datetime import datetime

# ================== T√çNH NƒÇNG: L·∫§Y TH√îNG TIN TH·ªúI TI·∫æT ==================

OPENWEATHER_API_KEY = "89fb4e8431599d5dba5e5d53a3fe4162"

def get_weather(city_name):
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={OPENWEATHER_API_KEY}&lang=vi&units=metric"
        response = requests.get(url)
        data = response.json()

        if data.get("cod") != 200:
            return f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin th·ªùi ti·∫øt cho ƒë·ªãa ƒëi·ªÉm: **{city_name}**."

        weather = data["weather"][0]["description"].capitalize()
        temp = data["main"]["temp"]
        feels_like = data["main"]["feels_like"]
        humidity = data["main"]["humidity"]
        wind_speed = data["wind"]["speed"]

        suggestion = ""
        if "m∆∞a" in weather.lower():
            suggestion = "Tr·ªùi ƒëang c√≥ m∆∞a, b·∫°n n√™n mang theo √°o m∆∞a v√† tr√°nh c√°c ho·∫°t ƒë·ªông ngo√†i tr·ªùi."
        elif temp >= 33:
            suggestion = "Tr·ªùi kh√° n√≥ng, h√£y mang theo n∆∞·ªõc v√† tr√°nh ƒëi v√†o bu·ªïi tr∆∞a."
        elif temp <= 20:
            suggestion = "Th·ªùi ti·∫øt se l·∫°nh, b·∫°n n√™n mang theo √°o kho√°c."
        else:
            suggestion = "Th·ªùi ti·∫øt d·ªÖ ch·ªãu, r·∫•t ph√π h·ª£p cho c√°c ho·∫°t ƒë·ªông du l·ªãch ngo√†i tr·ªùi."

        return (
            f"üå§ **Th·ªùi ti·∫øt t·∫°i {city_name}**:\n"
            f"- Tr·∫°ng th√°i: {weather}\n"
            f"- Nhi·ªát ƒë·ªô: {temp}¬∞C (C·∫£m gi√°c nh∆∞ {feels_like}¬∞C)\n"
            f"- ƒê·ªô ·∫©m: {humidity}%\n"
            f"- T·ªëc ƒë·ªô gi√≥: {wind_speed} m/s\n\n"
            f"üí° **G·ª£i √Ω du l·ªãch:** {suggestion}"
        )
    except Exception as e:
        return f"‚ö†Ô∏è L·ªói khi l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt: {e}"

# ================== C√ÅC T√çNH NƒÇNG M·ªû R·ªòNG ==================

def suggest_best_time(city):
    return f"üóì G·ª£i √Ω: Th·ªùi ƒëi·ªÉm l√Ω t∆∞·ªüng ƒë·ªÉ du l·ªãch {city} l√† t·ª´ th√°ng 3 ƒë·∫øn th√°ng 8, khi th·ªùi ti·∫øt kh√¥ r√°o v√† bi·ªÉn xanh ƒë·∫πp nh·∫•t!"

def suggest_local_food(city):
    return f"üçú ·∫®m th·ª±c ƒë·∫∑c tr∆∞ng t·∫°i {city}: b√°nh m√¨, b√∫n b√≤, h·∫£i s·∫£n t∆∞∆°i s·ªëng v√† c√† ph√™ ƒë·ªãa ph∆∞∆°ng. ƒê·ª´ng b·ªè l·ª° c√°c qu√°n n·ªïi ti·∫øng g·∫ßn trung t√¢m!"

def suggest_trip_plan(city, days=3):
    plans = [
        f"üìÖ **L·ªãch tr√¨nh g·ª£i √Ω {days} ng√†y t·∫°i {city}:**",
        "- Ng√†y 1: Kh√°m ph√° trung t√¢m th√†nh ph·ªë, c√°c ƒëi·ªÉm vƒÉn h√≥a, ch·ª£ ƒë·ªãa ph∆∞∆°ng.",
        "- Ng√†y 2: Tham quan thi√™n nhi√™n, danh lam th·∫Øng c·∫£nh, tr·∫£i nghi·ªám ·∫©m th·ª±c ƒë·∫∑c tr∆∞ng.",
        "- Ng√†y 3: Mua s·∫Øm, ch·ª•p h√¨nh l∆∞u ni·ªám v√† th∆∞·ªüng th·ª©c m√≥n ƒë·∫∑c s·∫£n tr∆∞·ªõc khi r·ªùi ƒëi."
    ]
    return "\n".join(plans)

def estimate_cost(city, days=3):
    cost = days * 2000000
    return f"üí∏ Chi ph√≠ ∆∞·ªõc t√≠nh cho chuy·∫øn ƒëi {days} ng√†y t·∫°i {city}: kho·∫£ng {cost:,} VNƒê/ng∆∞·ªùi (bao g·ªìm ƒÉn, ·ªü, di chuy·ªÉn v√† v√© tham quan)."

def suggest_events(city):
    return f"üéâ S·ª± ki·ªán n·ªïi b·∫≠t t·∫°i {city}: L·ªÖ h·ªôi vƒÉn h√≥a, c√°c show √¢m nh·∫°c v√† h·ªôi ch·ª£ du l·ªãch ƒë·ªãa ph∆∞∆°ng di·ªÖn ra h·∫±ng th√°ng."

def suggest_photospots(city):
    return f"üì∏ G·ª£i √Ω ƒëi·ªÉm check-in t·∫°i {city}: trung t√¢m th√†nh ph·ªë, khu v·ª±c b·ªù bi·ªÉn, c·∫ßu n·ªïi ti·∫øng, v√† c√°c qu√°n c√† ph√™ view ƒë·∫πp l√∫c ho√†ng h√¥n."

def personalized_memory(user_name, preference):
    return f"Xin ch√†o {user_name}! L·∫ßn tr∆∞·ªõc b·∫°n th√≠ch du l·ªãch {preference}, l·∫ßn n√†y b·∫°n c√≥ mu·ªën kh√°m ph√° m·ªôt n∆°i t∆∞∆°ng t·ª± kh√¥ng?"

# ================== C·∫§U H√åNH OPENAI CHATBOT ==================

client = openai.OpenAI(
    base_url="https://aiportalapi.stu-platform.live/jpe",
    api_key="sk-DXNNoBnsC6GG_GePaPVBLg"
)

ChatBotName = "Team_XYZ"

system_prompt = """
## VAI TR√í H·ªÜ TH·ªêNG ##
B·∫°n l√† H∆∞·ªõng d·∫´n vi√™n du l·ªãch ·∫£o Alex - ng∆∞·ªùi k·ªÉ chuy·ªán, am hi·ªÉu vƒÉn h√≥a, l·ªãch s·ª≠, ·∫©m th·ª±c v√† th·ªùi ti·∫øt Vi·ªát Nam.
Lu√¥n ƒë∆∞a ra th√¥ng tin h·ªØu √≠ch, g·ª£i √Ω l·ªãch tr√¨nh, m√≥n ƒÉn, chi ph√≠, th·ªùi gian l√Ω t∆∞·ªüng, s·ª± ki·ªán v√† g√≥c ch·ª•p ·∫£nh.
"""

# ================== GIAO DI·ªÜN STREAMLIT ==================

st.title(f"ü§ñ Chatbot H∆∞·ªõng d·∫´n vi√™n du l·ªãch {ChatBotName}")

if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "system", "content": system_prompt}]
if "suggested_questions" not in st.session_state:
    st.session_state.suggested_questions = []

# H√†m t√°ch ƒë·ªãa ƒëi·ªÉm th√¥ng minh b·∫±ng AI
def extract_city_from_input(user_text):
    try:
        prompt = f"H√£y tr√≠ch xu·∫•t t√™n th√†nh ph·ªë ho·∫∑c ƒë·ªãa ƒëi·ªÉm du l·ªãch t·ª´ c√¢u sau: '{user_text}'. Ch·ªâ tr·∫£ v·ªÅ t√™n ƒë·ªãa ƒëi·ªÉm duy nh·∫•t, kh√¥ng th√™m g√¨ kh√°c."
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "system", "content": prompt}],
            max_tokens=20,
            temperature=0
        )
        city_name = response.choices[0].message.content.strip()
        return city_name
    except Exception as e:
        return None

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for message in st.session_state.messages:
    if message["role"] == "user":
        with st.chat_message("user"):
            st.markdown(message["content"])
    elif message["role"] == "assistant":
        with st.chat_message("assistant"):
            st.markdown(message["content"])

user_input = st.chat_input("M·ªùi b·∫°n ƒë·∫∑t c√¢u h·ªèi:")

if user_input:
    st.session_state.messages.append({"role": "user", "content": user_input})

    city_guess = extract_city_from_input(user_input)
    if city_guess:
        weather_info = get_weather(city_guess)
        st.session_state.messages.append({"role": "assistant", "content": weather_info})

        st.session_state.messages.append({"role": "assistant", "content": suggest_best_time(city_guess)})
        st.session_state.messages.append({"role": "assistant", "content": suggest_local_food(city_guess)})
        st.session_state.messages.append({"role": "assistant", "content": suggest_trip_plan(city_guess)})
        st.session_state.messages.append({"role": "assistant", "content": estimate_cost(city_guess)})
        st.session_state.messages.append({"role": "assistant", "content": suggest_events(city_guess)})
        st.session_state.messages.append({"role": "assistant", "content": suggest_photospots(city_guess)})

    with st.spinner("ƒêang suy nghƒ©..."):
        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=st.session_state.messages,
                max_tokens=2000,
                temperature=0.7
            )
            assistant_response = response.choices[0].message.content
            st.session_state.messages.append({"role": "assistant", "content": assistant_response})

            st.session_state.suggested_questions.clear()
            for line in assistant_response.split('\n'):
                if line.strip().startswith(('1.', '2.', '3.')):
                    st.session_state.suggested_questions.append(line.split('.', 1)[1].strip())

            st.rerun()
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")
            st.session_state.messages.pop()
