# Travel_Chat_Bot_Enhanced_Hybrid.py
import streamlit as st
import openai
import json
import requests
import os
from datetime import datetime, timedelta
from geopy.geocoders import Nominatim
import pandas as pd
import sqlite3
import pydeck as pdk

# ===============================
# üîê CONFIG / SECRETS
# ===============================
OPENAI_API_KEY = st.secrets["openai"]["OPENAI_API_KEY"]
OPENAI_ENDPOINT = st.secrets["openai"].get("OPENAI_ENDPOINT", "https://api.openai.com/v1")
DEPLOYMENT_NAME = st.secrets["openai"].get("DEPLOYMENT_NAME", "gpt-4o-mini")
OPENWEATHERMAP_API_KEY = st.secrets["weather"]["OPENWEATHERMAP_API_KEY"]
GOOGLE_PLACES_KEY = st.secrets.get("google", {}).get("PLACES_API_KEY", None)

client = openai.OpenAI(base_url=OPENAI_ENDPOINT, api_key=OPENAI_API_KEY)

ChatBotName = "Team_XYZ"

system_prompt = """
B·∫°n l√† H∆∞·ªõng d·∫´n vi√™n du l·ªãch ·∫£o Alex - ng∆∞·ªùi k·ªÉ chuy·ªán, am hi·ªÉu vƒÉn h√≥a, l·ªãch s·ª≠, ·∫©m th·ª±c v√† th·ªùi ti·∫øt Vi·ªát Nam.
Lu√¥n ƒë∆∞a ra th√¥ng tin h·ªØu √≠ch, g·ª£i √Ω l·ªãch tr√¨nh, m√≥n ƒÉn, chi ph√≠, th·ªùi gian l√Ω t∆∞·ªüng, s·ª± ki·ªán v√† g√≥c ch·ª•p ·∫£nh.
"""

# ===============================
# üß† DATABASE LOGGING
# ===============================
DB_PATH = "travel_chatbot_logs.db"
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS interactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT,
            user_input TEXT,
            city TEXT,
            start_date TEXT,
            end_date TEXT,
            intent TEXT
        )
    """)
    conn.commit()
    conn.close()
init_db()

def log_interaction(user_input, city=None, start_date=None, end_date=None, intent=None):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO interactions (timestamp, user_input, city, start_date, end_date, intent)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (datetime.utcnow().isoformat(), user_input, city,
          start_date.isoformat() if start_date else None,
          end_date.isoformat() if end_date else None,
          intent))
    conn.commit()
    conn.close()

# ===============================
# üåç GEOCODING & MAP
# ===============================
geolocator = Nominatim(user_agent="travel_chatbot_app")

def geocode_city(city_name):
    try:
        loc = geolocator.geocode(city_name, timeout=10)
        if loc:
            return loc.latitude, loc.longitude, loc.address
        return None, None, None
    except Exception:
        return None, None, None

def show_map(lat, lon, zoom=10, title=""):
    if lat is None or lon is None:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu to·∫° ƒë·ªô ƒë·ªÉ hi·ªÉn th·ªã b·∫£n ƒë·ªì.")
        return
    st.write(f"**V·ªã tr√≠:** {title} ({lat:.5f}, {lon:.5f})")
    view = pdk.ViewState(latitude=lat, longitude=lon, zoom=zoom)
    layer = pdk.Layer(
        "ScatterplotLayer",
        data=pd.DataFrame([{"lat": lat, "lon": lon}]),
        get_position='[lon, lat]',
        get_radius=2000,
    )
    r = pdk.Deck(layers=[layer], initial_view_state=view)
    st.pydeck_chart(r)

# ===============================
# ‚òÅÔ∏è WEATHER
# ===============================
def get_weather_forecast(city_name, start_date=None, end_date=None):
    try:
        url = f"http://api.openweathermap.org/data/2.5/forecast?q={city_name}&appid={OPENWEATHERMAP_API_KEY}&lang=vi&units=metric"
        response = requests.get(url, timeout=10)
        data = response.json()

        if data.get("cod") != "200":
            return f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin d·ª± b√°o th·ªùi ti·∫øt cho ƒë·ªãa ƒëi·ªÉm: **{city_name}**."

        forecast_text = f"üå§ **D·ª± b√°o th·ªùi ti·∫øt cho {city_name}:**\n"
        if start_date and end_date:
            current = start_date
            while current <= end_date:
                date_str = current.strftime("%Y-%m-%d")
                day_forecasts = [f for f in data['list'] if f['dt_txt'].startswith(date_str)]
                if not day_forecasts:
                    forecast_text += f"\nüìÖ {current.strftime('%d/%m/%Y')}: Kh√¥ng c√≥ d·ªØ li·ªáu d·ª± b√°o.\n"
                else:
                    temps = [f['main']['temp'] for f in day_forecasts]
                    desc = day_forecasts[0]['weather'][0]['description']
                    forecast_text += (
                        f"\nüìÖ {current.strftime('%d/%m/%Y')} - {desc.capitalize()}\n"
                        f"üå° Nhi·ªát ƒë·ªô trung b√¨nh: {sum(temps)/len(temps):.1f}¬∞C\n"
                    )
                current += timedelta(days=1)
        else:
            first_forecast = data['list'][0]
            desc = first_forecast['weather'][0]['description'].capitalize()
            temp = first_forecast['main']['temp']
            forecast_text += f"- Hi·ªán t·∫°i: {desc}, {temp}¬∞C\n"
        return forecast_text
    except Exception as e:
        return f"‚ö†Ô∏è L·ªói khi l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt: {e}"

# ===============================
# üñºÔ∏è UNSPLASH IMAGE
# ===============================
def get_unsplash_image_for_city(city):
    try:
        return f"https://source.unsplash.com/1200x800/?{requests.utils.requote_uri(city)}"
    except Exception:
        return None

# ===============================
# üçú RESTAURANT HYBRID MODE
# ===============================
def get_restaurants_google(city, api_key, limit=5):
    try:
        query = f"nh√† h√†ng t·∫°i {city}, Vi·ªát Nam"
        url = "https://maps.googleapis.com/maps/api/place/textsearch/json"
        params = {"query": query, "key": api_key, "language": "vi"}
        res = requests.get(url, params=params, timeout=10).json()
        if "error_message" in res:
            return [{"error": res["error_message"]}]
        results = []
        for r in res.get("results", [])[:limit]:
            results.append({
                "name": r.get("name"),
                "rating": r.get("rating", "N/A"),
                "address": r.get("formatted_address", ""),
                "maps_url": f"https://www.google.com/maps/place/?q=place_id:{r.get('place_id')}"
            })
        return results
    except Exception as e:
        return [{"error": str(e)}]

def get_local_restaurants(city, limit=5):
    try:
        df = pd.read_csv("data/restaurants_vn.csv")
        df_city = df[df["city"].str.lower().str.contains(city.lower())]
        if df_city.empty:
            return []
        return df_city.head(limit).to_dict("records")
    except Exception:
        return []

def get_restaurants(city, limit=5):
    if GOOGLE_PLACES_KEY:
        data = get_restaurants_google(city, GOOGLE_PLACES_KEY, limit)
        if data and not data[0].get("error"):
            return data
    return get_local_restaurants(city, limit)

# ===============================
# ‚úàÔ∏è SUGGESTIONS / ITINERARY
# ===============================
def suggest_trip_plan(city, days=3):
    return f"üìÖ **L·ªãch tr√¨nh g·ª£i √Ω {days} ng√†y t·∫°i {city}:**\n- Ng√†y 1: Kh√°m ph√° trung t√¢m th√†nh ph·ªë, ch·ª£ v√† di t√≠ch.\n- Ng√†y 2: Tham quan thi√™n nhi√™n v√† ·∫©m th·ª±c.\n- Ng√†y 3: Mua s·∫Øm, ch·ª•p ·∫£nh v√† th∆∞·ªüng th·ª©c m√≥n ƒë·∫∑c s·∫£n."

def estimate_cost(city, days=3, people=1):
    total = 800000 * days * people
    return f"üí∏ ∆Ø·ªõc t√≠nh chi ph√≠ cho {people} ng∆∞·ªùi {days} ng√†y ·ªü {city}: kho·∫£ng {total:,} VNƒê."

def suggest_local_food(city):
    return f"üç≤ ·∫®m th·ª±c ƒë·∫∑c tr∆∞ng t·∫°i {city}: m√≥n ƒë·ªãa ph∆∞∆°ng, h·∫£i s·∫£n, c√† ph√™ v√† qu√°n ƒÉn ƒë∆∞·ªùng ph·ªë."

def suggest_events(city):
    return f"üéâ S·ª± ki·ªán ti√™u bi·ªÉu t·∫°i {city}: l·ªÖ h·ªôi vƒÉn h√≥a, ch·ª£ ƒë√™m, s·ª± ki·ªán ·∫©m th·ª±c h·∫±ng th√°ng."

def suggest_photospots(city):
    return f"üì∏ ƒêi·ªÉm check-in n·ªïi b·∫≠t: trung t√¢m th√†nh ph·ªë, b·ªù s√¥ng/bi·ªÉn, qu√°n c√† ph√™ view ƒë·∫πp."

# ===============================
# ü§ñ AI CITY & DATE EXTRACTION (Bilingual)
# ===============================
def extract_city_and_dates(user_text):
    try:
        prompt = f"""
You are a multilingual travel information extractor.
The user message may be in **Vietnamese or English**.
Extract:
1. Destination city
2. Start date (YYYY-MM-DD)
3. End date (YYYY-MM-DD)
Return valid JSON only:
{{"city": "...", "start_date": "...", "end_date": "..."}}
Message: "{user_text}"
"""
        response = client.chat.completions.create(
            model=DEPLOYMENT_NAME,
            messages=[{"role": "system", "content": prompt}],
            max_tokens=200,
            temperature=0
        )
        content = response.choices[0].message.content.strip()
        start, end = content.find('{'), content.rfind('}')
        data = json.loads(content[start:end+1])
        city, start_date, end_date = data.get("city"), data.get("start_date"), data.get("end_date")

        def _parse(d):
            if not d: return None
            dt = datetime.strptime(d, "%Y-%m-%d")
            if dt.year < datetime.now().year:
                dt = dt.replace(year=datetime.now().year)
            return dt
        start_dt, end_dt = _parse(start_date), _parse(end_date)
        if start_dt and not end_dt:
            end_dt = start_dt
        return city, start_dt, end_dt
    except Exception:
        return None, None, None

# ===============================
# üí¨ STREAMLIT UI
# ===============================
st.set_page_config(page_title=f"ü§ñ {ChatBotName} - Travel Assistant", layout="wide")
st.title(f"ü§ñ Chatbot H∆∞·ªõng d·∫´n vi√™n du l·ªãch {ChatBotName}")

with st.sidebar:
    st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
    language = st.selectbox("Ng√¥n ng·ªØ", ["T·ª± ƒë·ªông", "Ti·∫øng Vi·ªát", "English"])
    info_options = st.multiselect("Hi·ªÉn th·ªã th√¥ng tin", 
                                  ["Weather", "Itinerary", "Food", "Map", "Photos", "Cost", "Events", "Analytics"],
                                  default=["Weather", "Itinerary", "Food", "Map", "Photos"])
    st.markdown("---")
    if GOOGLE_PLACES_KEY:
        st.success("‚úÖ Google Places API ƒëang ho·∫°t ƒë·ªông")
    else:
        st.info("üìÇ S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u (CSV fallback)")

if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "system", "content": system_prompt}]
if "suggested_questions" not in st.session_state:
    st.session_state.suggested_questions = [
        "Th·ªùi ti·∫øt ·ªü ƒê√† N·∫µng tu·∫ßn t·ªõi?",
        "Top m√≥n ƒÉn ·ªü Hu·∫ø?",
        "L·ªãch tr√¨nh 3 ng√†y ·ªü Nha Trang",
        "C√≥ s·ª± ki·ªán g√¨ ·ªü H√† N·ªôi th√°ng 12?"
    ]

st.write("### üîé G·ª£i √Ω nhanh")
cols = st.columns(len(st.session_state.suggested_questions))
for i, q in enumerate(st.session_state.suggested_questions):
    if cols[i].button(q):
        st.session_state.user_input = q

user_input = st.chat_input("M·ªùi b·∫°n ƒë·∫∑t c√¢u h·ªèi:")
if "user_input" in st.session_state and st.session_state.user_input:
    user_input = st.session_state.pop("user_input")

if user_input:
    st.session_state.messages.append({"role": "user", "content": user_input})
    city_guess, start_date, end_date = extract_city_and_dates(user_input)
    log_interaction(user_input, city_guess, start_date, end_date)

    responses = []
    if city_guess and "Weather" in info_options:
        responses.append(get_weather_forecast(city_guess, start_date, end_date))
    if city_guess and "Itinerary" in info_options:
        responses.append(suggest_trip_plan(city_guess))
    if city_guess and "Food" in info_options:
        responses.append(suggest_local_food(city_guess))
    if city_guess and "Cost" in info_options:
        responses.append(estimate_cost(city_guess))
    if city_guess and "Events" in info_options:
        responses.append(suggest_events(city_guess))
    if city_guess and "Photos" in info_options:
        responses.append(suggest_photospots(city_guess))

    for r in responses:
        st.chat_message("assistant").markdown(r)

    lat, lon, full_address = geocode_city(city_guess) if city_guess else (None, None, None)
    cols = st.columns([2, 3])
    with cols[0]:
        if "Map" in info_options:
            show_map(lat, lon, title=full_address or city_guess)
        if "Photos" in info_options:
            img_url = get_unsplash_image_for_city(city_guess)
            if img_url:
                st.image(img_url, caption=f"H√¨nh ·∫£nh g·ª£i √Ω cho {city_guess}")
    with cols[1]:
        if "Food" in info_options:
            st.subheader("üçΩÔ∏è G·ª£i √Ω ·∫©m th·ª±c & nh√† h√†ng")
            restaurants = get_restaurants(city_guess, limit=5)
            if restaurants:
                df = pd.DataFrame(restaurants)
                if "maps_url" in df.columns:
                    df["name"] = df.apply(lambda x: f'<a href="{x.get("maps_url")}" target="_blank">{x["name"]}</a>', axis=1)
                    st.markdown(df.to_html(escape=False, index=False), unsafe_allow_html=True)
                else:
                    st.dataframe(df)
            else:
                st.info("Kh√¥ng t√¨m th·∫•y qu√°n ƒÉn ph√π h·ª£p.")

# ===============================
# üìä ANALYTICS
# ===============================
st.markdown("---")
st.header("üìä Th·ªëng k√™ truy v·∫•n g·∫ßn ƒë√¢y")
try:
    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql("SELECT * FROM interactions ORDER BY timestamp DESC LIMIT 200", conn)
    st.metric("T·ªïng l∆∞·ª£t t∆∞∆°ng t√°c", int(df.shape[0]))
    if not df.empty:
        st.write(df[["timestamp", "user_input", "city"]])
    conn.close()
except Exception:
    st.info("Ch∆∞a c√≥ d·ªØ li·ªáu t∆∞∆°ng t√°c.")
